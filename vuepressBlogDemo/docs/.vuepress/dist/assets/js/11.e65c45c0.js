(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{356:function(t,n,a){"use strict";a.r(n);var e=a(42),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-删除数组中的重复项-leetcode23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-删除数组中的重复项-leetcode23"}},[t._v("#")]),t._v(" 1.删除数组中的重复项-leetcode23")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var removeDuplicates = function (nums) {\n    if (nums.length === 0) return 0;\n    let pointer1 = 0;   //慢指针\n    for (let pointer2 = 0; pointer2 < nums.length; pointer2++) {   //快指针\n        if (nums[pointer1] !== nums[pointer2]) {\n            pointer1++;\n            nums[pointer1] = nums[pointer2]\n        }                   \n        //快慢指针值不相同时，慢指针前进并赋值为快指针的值\n    }\n    return pointer1 + 1;\n};\n")])])]),a("h2",{attrs:{id:"_2-链表中倒数第k个节点-剑指offer22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-链表中倒数第k个节点-剑指offer22"}},[t._v("#")]),t._v(" 2.链表中倒数第k个节点-剑指offer22")]),t._v(" "),a("h3",{attrs:{id:"双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode last = head;\n        ListNode fast = head;       //设置快慢俩个指针，先让快指针移动k个单位\n        if(head.next==null&&k==1){      \n            return head;\n        }\n        for(;k>0;k--){\n            fast = fast.next;\n        }\n        while(fast!=null){          //快慢指针一起向后移，直到快指针指向null，此时慢指针就是要找的倒数第k个\n            last = last.next;\n            fast = fast.next;\n        }\n        return last;\n    }\n}\n")])])]),a("h3",{attrs:{id:"使用栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用栈"}},[t._v("#")]),t._v(" 使用栈")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var getKthFromEnd = function(head, k) {\n    let stack = [];\n    let result;\n    while(head){            //先将所有元素从头到尾入栈\n        stack.push(head);\n        head=head.next;\n    }\n    for(;k>0;k--){          //依次取出k个元素，结果为倒数第k个节点\n        result = stack.pop();\n    }\n    return result;\n};\n")])])]),a("p",[t._v("对于要求返回值的，直接返回head.val,比如:"),a("strong",[t._v("leetcode-面试题 02.02. 返回倒数第 k 个节点")])]),t._v(" "),a("h2",{attrs:{id:"_3-二维数组中的查找-剑指offer04"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-二维数组中的查找-剑指offer04"}},[t._v("#")]),t._v(" 3.二维数组中的查找-剑指offer04")]),t._v(" "),a("h3",{attrs:{id:"暴力遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暴力遍历"}},[t._v("#")]),t._v(" 暴力遍历")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var findNumberIn2DArray = function(matrix, target) {\n    if(matrix.length===0) return false;\n    for(let i =0;i<matrix.length;i++){\n        for(let j = 0;j<matrix[0].length;j++){\n            if(matrix[i][j]===target){\n                return true;\n            }\n        }\n    }\n    return false;\n};\n")])])]),a("h4",{attrs:{id:"缺点："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点："}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),a("p",[t._v("复杂度过高，可以达到O(nm)，而且没有利用价值所给数组的已排序特性")]),t._v(" "),a("h3",{attrs:{id:"双指针-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针-2"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if(matrix == null || matrix.length == 0) {\n            return false;\n        }\n        int width = matrix[0].length-1; \n        int height = matrix.length;   \n        int row=0;\n        while(row<height&&width>=0){\n            if(matrix[row][width]>target){\n                width--;\n            }\n            else if(matrix[row][width]<target){\n                row++;\n            }\n            else {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n")])])]),a("h4",{attrs:{id:"原理："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理："}},[t._v("#")]),t._v(" 原理：")]),t._v(" "),a("p",[t._v("由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值")]),t._v(" "),a("h2",{attrs:{id:"_4-合并排序的数组-面试题10-01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-合并排序的数组-面试题10-01"}},[t._v("#")]),t._v(" 4.合并排序的数组-面试题10.01")]),t._v(" "),a("h3",{attrs:{id:"合并后排序-mereg-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并后排序-mereg-sort"}},[t._v("#")]),t._v(" 合并后排序(mereg+sort)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var merge = function(A, m, B, n) {\n    for(const i of B){\n        A[m++]=i;\n    }\n    A.sort((a,b)=>a-b)\n};\n")])])]),a("h3",{attrs:{id:"逆向双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆向双指针"}},[t._v("#")]),t._v(" 逆向双指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public void merge(int[] A, int m, int[] B, int n) {\n        int lon = m+n-1;\n        int n1 = n-1,m1=m-1;\n        while(m1>=0||n1>=0){\n            if(m1==-1){         //当A数组已经全部排序后，将B数组依次放入A前面\n                A[lon--]=B[n1--];\n            }\n            else if(n1==-1){    //B数组为空时，将A数组全部放入A前面，也就是原地不动\n                A[lon--]=A[m1--];\n            }\n            else if(B[n1]>A[m1]){\n                A[lon--]=B[n1--];\n            }\n            else if(B[n1]<A[m1]){\n                A[lon--]=A[m1--];\n            }\n            else{\n                A[lon--]=B[n1--];\n            }\n        }\n    }\n\n}\n")])])]),a("h4",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[t._v("因为A数组的空间足够大,所以指针设置为从后向前遍历，每次取两者之中的较大者放进 A 的最后面,不会出现A数组空间不足的现象")]),t._v(" "),a("h2",{attrs:{id:"_5-验证回文串-leetcode-125"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-验证回文串-leetcode-125"}},[t._v("#")]),t._v(" 5.验证回文串-leetcode-125")]),t._v(" "),a("h3",{attrs:{id:"双指针-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针-3"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var isPalindrome = function(s) {\n    let news =s.replace(/[, .:@#$%^&*\\-\\[\\]\\{\\}"`\'\\_\\?;!\\(\\)]/g,"")   //去除掉所有非数字字母\n    news = news.toLowerCase();      //全部转化为小写\n    let num = news.length;\n    for(let i=0;i<=news.length/2;i++){\n        if(news[i]!==news[num-i-1]){\n            return false;\n        }\n    }\n    return true;\n};\n')])])]),a("h3",{attrs:{id:"java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" java")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public boolean isPalindrome(String s) {\n        if (s == null || s.length() == 0)\n            return true;\n        s = s.toLowerCase();\n        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {\n            while (i < j && !Character.isLetterOrDigit(s.charAt(i)))\n                i++;\n            while (i < j && !Character.isLetterOrDigit(s.charAt(j)))\n                j--;\n            if (s.charAt(i) != s.charAt(j))\n                return false;\n        }\n        return true;\n    }\n}\n")])])]),a("h2",{attrs:{id:"_6-移动零-leetcode-283"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-移动零-leetcode-283"}},[t._v("#")]),t._v(" 6.移动零-leetcode-283")]),t._v(" "),a("h3",{attrs:{id:"双指针-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针-java"}},[t._v("#")]),t._v(" 双指针(java)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public void moveZeroes(int[] nums) {\n        int slow=0;\n        for(int i = 0;i<nums.length;i++){\n            if(nums[i]!=0){         //遍历数组，遇到非0元素则依次加入到slow指针处,遇到0元素只移动快指针\n                nums[slow++]=nums[i];\n            }\n        }\n        for(;slow<nums.length;slow++){   //遍历完一遍后,slow指针指向的位置后所有非0元素已经移动到最前面，此时进行补0\n            nums[slow]=0;\n        }\n    }\n}\n")])])]),a("h4",{attrs:{id:"图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解"}},[t._v("#")]),t._v(" 图解")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/9669b4ffb158eaeeee6f0cd66a70f24411575edab1ab8a037c4c9084b1c743f5-283_1.gif",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"双指针2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针2"}},[t._v("#")]),t._v(" 双指针2")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var moveZeroes = function(nums) {\n    let slow=0;\n    for(let i=0;i<nums.length;i++){\n        if(nums[i]!=0){\n            [nums[slow],nums[i]]=[nums[i],nums[slow]]   //当快指针指向的元素非零时，交换俩个元素，快慢指针一起向前移动\n            slow++;\n        }\n    }                                                   //快指针指向的元素为0时，只移动快指针\n};\n")])])]),a("h4",{attrs:{id:"图解-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解-2"}},[t._v("#")]),t._v(" 图解")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/36d1ac5d689101cbf9947465e94753c626eab7fcb736ae2175f5d87ebc85fdf0-283_2.gif",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_7-最接近的三数之和-leetcode-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-最接近的三数之和-leetcode-16"}},[t._v("#")]),t._v(" 7.最接近的三数之和-leetcode-16")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        Arrays.sort(nums);          //先对数组进行排序\n        int result=nums[0] + nums[1] + nums[nums.length - 1];\n        for(int i=0;i<nums.length-2;i++){\n            int slow=i+1,fast=nums.length-1;   //头指针为每次遍历的i后一个元素为起点,快指针指向数组尾\n            while(slow<fast){\n                int val=nums[i]+nums[slow]+nums[fast];\n                if(Math.abs(val-target)<Math.abs(result-target)){\n                    result=val;                 //将新的三数之和与原始值比较，进而更新原始值\n                }\n                if(val>target){                 //如果结果比target大，则向前移动指针\n                    fast--;\n                }\n                else if(val<target){\n                    slow++;\n                }\n                else{\n                    return val;                 //如果三数之和刚好为target，返回val，程序结束\n                }\n            }\n        }\n        return result;\n    }\n}\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);